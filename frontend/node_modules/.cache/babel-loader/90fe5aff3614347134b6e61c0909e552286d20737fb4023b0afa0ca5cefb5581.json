{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanik\\\\OneDrive\\\\Desktop\\\\Expense Tracker\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\Acorn\\\\AcornForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useGlobalContext } from '../../context/globalContext';\nimport Button from '../Button/Button';\nimport { plus } from '../../utils/Icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AcornForm() {\n  _s();\n  const {\n    addSaving,\n    error,\n    setError\n  } = useGlobalContext();\n  const [inputState, setInputState] = useState({\n    amount: '',\n    date: ''\n  });\n  const {\n    amount,\n    date\n  } = inputState;\n  const [multiplier, setMultiplier] = useState('');\n  const [roundOffValue, setRoundOffValue] = useState('');\n  const [totalAcorns, setTotalAcorns] = useState(null);\n  const calculateAcorns = () => {\n    if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\n      const parsedAmount = parseFloat(amount);\n      const parsedMultiplier = parseFloat(multiplier);\n      const parsedRoundOffValue = parseFloat(roundOffValue);\n      if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\n        const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\n        const acorns = roundedTotal - parsedAmount;\n        setTotalAcorns(acorns * parsedMultiplier);\n      } else {\n        alert('Please enter valid numbers');\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n  const roundNumber = (number, ndigits) => {\n    if (!(number % 1)) {\n      return Math.ceil(number / 5) * 5;\n    } else {\n      return Math.ceil(number);\n    }\n  };\n  const handleInput = name => e => {\n    setInputState({\n      ...inputState,\n      [name]: e.target.value\n    });\n    setError('');\n  };\n  const handleSubmit = e => {\n    calculateAcorns();\n    e.preventDefault();\n    addSaving({\n      ...inputState,\n      amount: totalAcorns\n    }); // Assuming totalAcorns is the correct amount to add\n    setInputState({\n      amount: '',\n      date: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SavingFormStyled, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-control\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: amount,\n        type: \"text\",\n        name: 'amount',\n        placeholder: 'Expense Amount',\n        onChange: handleInput('amount')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"multiplier\",\n        children: \"Multiplier:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"multiplier\",\n        value: multiplier,\n        onChange: e => setMultiplier(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-control\",\n      children: /*#__PURE__*/_jsxDEV(DatePicker, {\n        id: \"date\",\n        placeholderText: \"Enter A Date\",\n        selected: date,\n        dateFormat: \"dd/MM/yyyy\",\n        onChange: date => {\n          setInputState({\n            ...inputState,\n            date: date\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit-btn\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        name: 'Add Saving',\n        icon: plus,\n        bPad: '.8rem 1.6rem',\n        bRad: '30px',\n        bg: 'var(--color-accent',\n        color: '#fff'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(AcornForm, \"Gw7kUb/KM9CeaNaZCFjMgFdjPJk=\", false, function () {\n  return [useGlobalContext];\n});\n_c = AcornForm;\nconst SavingFormStyled = styled.form`\n    // Your styling code here\n`;\n_c2 = SavingFormStyled;\nexport default AcornForm;\n// import React, { useState } from 'react'\n// import styled from 'styled-components'\n// import DatePicker from 'react-datepicker'\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import { useGlobalContext } from '../../context/globalContext';\n// import Button from '../Button/Button';\n// import { plus } from '../../utils/Icons';\n\n// function AcornForm() {\n//     const {addSaving, error, setError} = useGlobalContext()\n//     const [inputState, setInputState] = useState({\n//         amount: '',\n//         date: '',\n//     })\n//     const { amount, date} = inputState;\n//     const [amount1, setAmount] = useState('');\n//   const [multiplier, setMultiplier] = useState('');\n//   const [roundOffValue, setRoundOffValue] = useState('');\n//   const [totalAcorns, setTotalAcorns] = useState(null);\n//   function isDecimal(num) {\n//     return (num % 1);\n//  }\n//   const roundNumber = (number, ndigits) => {\n//     debugger\n//     if (!isDecimal(number)) {\n//         return Math.ceil(number / 5) * 5;\n//     } else {\n//         return Math.ceil(number);\n//     }\n//     // if (ndigits === null) {\n//     //   return Math.round(number);\n//     // }\n//     // const factor = Math.pow(10, ndigits);\n//     // return Math.round(number * factor) / factor;/\n\n//   };\n\n//   const calculateAcorns = () => {\n//     debugger\n//     if (amount1 !== '' && multiplier !== '' && roundOffValue !== '') {\n//       const parsedAmount = parseFloat(amount1);\n//       const parsedMultiplier = parseFloat(multiplier);\n//       const parsedRoundOffValue = parseFloat(roundOffValue);\n\n//       if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\n//         // const total = parsedAmount * parsedMultiplier;\n//         const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\n//         const acorns = roundedTotal - parsedAmount;\n//         setTotalAcorns(acorns*parsedMultiplier);\n//       } else {\n//         alert('Please enter valid numbers');\n//       }\n//     } else {\n//       alert('Please fill in all fields');\n//     }\n//   };\n\n//     const handleInput = name => e => {\n//         setAmount(e.target.value)\n//         setInputState({...inputState, [name]: e.target.value})\n//         setError('')\n//     }\n\n//     const handleSubmit = e => {\n//         calculateAcorns()\n//         setAmount({totalAcorns})\n//         e.preventDefault()\n//         // setInputState({...inputState, [name]: e.target.value})\n//         addSaving(inputState)\n//         setInputState({\n//             amount: '',\n//             date: '',\n//         })\n//     }\n\n//     return (\n//         <SavingFormStyled onSubmit={handleSubmit}>\n//             {error && <p className='error'>{error}</p>}\n//             {/* <div className=\"input-control\">\n//                 <input \n//                     type=\"text\" \n//                     value={title}\n//                     name={'title'} \n//                     placeholder=\"Expense Title\"\n//                     onChange={handleInput('title')}\n//                 />\n//             </div> */}\n//             <div className=\"input-control\">\n//                 <input value={amount1}  \n//                     type=\"text\" \n//                     name={'amount'} \n//                     placeholder={'Expense Amount'}\n//                     onChange={handleInput('amount')} \n//                 />\n//             </div>\n//             <div>\n//         <label htmlFor=\"multiplier\">Multiplier:</label>\n//         <input\n//           type=\"number\"\n//           id=\"multiplier\"\n//           value={multiplier}\n//           onChange={(e) => setMultiplier(e.target.value)}\n//         />\n//       </div>\n//             <div className=\"input-control\">\n//                 <DatePicker \n//                     id='date'\n//                     placeholderText='Enter A Date'\n//                     selected={date}\n//                     dateFormat=\"dd/MM/yyyy\"\n//                     onChange={(date) => {\n//                         setInputState({...inputState, date: date})\n//                     }}\n//                 />\n//             </div>\n//             {/* <div className=\"selects input-control\">\n//                 <select required value={category} name=\"category\" id=\"category\" onChange={handleInput('category')}>\n//                     <option value=\"\" disabled >Select Option</option>\n//                     <option value=\"education\">Education</option>\n//                     <option value=\"groceries\">Groceries</option>\n//                     <option value=\"health\">Health</option>\n//                     <option value=\"subscriptions\">Subscriptions</option>\n//                     <option value=\"takeaways\">Takeaways</option>\n//                     <option value=\"clothing\">Clothing</option>  \n//                     <option value=\"travelling\">Travelling</option>  \n//                     <option value=\"other\">Other</option>  \n//                 </select>\n//             </div>\n//             <div className=\"input-control\">\n//                 <textarea name=\"description\" value={description} placeholder='Add A Reference' id=\"description\" cols=\"30\" rows=\"4\" onChange={handleInput('description')}></textarea>\n//                 </div>*/}\n//             <div className=\"submit-btn\">\n//                 <Button \n//                     name={'Add Saving'}\n//                     icon={plus}\n//                     bPad={'.8rem 1.6rem'}\n//                     bRad={'30px'}\n//                     bg={'var(--color-accent'}\n//                     color={'#fff'}\n//                 /> \n//             </div>\n//         </SavingFormStyled>\n//     )\n// }\n\n// const SavingFormStyled = styled.form`\n//     display: flex;\n//     flex-direction: column;\n//     gap: 2rem;\n//     input, textarea, select{\n//         font-family: inherit;\n//         font-size: inherit;\n//         outline: none;\n//         border: none;\n//         padding: .5rem 1rem;\n//         border-radius: 5px;\n//         border: 2px solid #fff;\n//         background: transparent;\n//         resize: none;\n//         box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n//         color: rgba(34, 34, 96, 0.9);\n//         &::placeholder{\n//             color: rgba(34, 34, 96, 0.4);\n//         }\n//     }\n//     .input-control{\n//         input{\n//             width: 100%;\n//         }\n//     }\n\n//     .selects{\n//         display: flex;\n//         justify-content: flex-end;\n//         select{\n//             color: rgba(34, 34, 96, 0.4);\n//             &:focus, &:active{\n//                 color: rgba(34, 34, 96, 1);\n//             }\n//         }\n//     }\n\n//     .submit-btn{\n//         button{\n//             box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n//             &:hover{\n//                 background: var(--color-green) !important;\n//             }\n//         }\n//     }\n// `;\n// export default AcornForm\nvar _c, _c2;\n$RefreshReg$(_c, \"AcornForm\");\n$RefreshReg$(_c2, \"SavingFormStyled\");","map":{"version":3,"names":["React","useState","styled","DatePicker","useGlobalContext","Button","plus","AcornForm","addSaving","error","setError","inputState","setInputState","amount","date","multiplier","setMultiplier","roundOffValue","setRoundOffValue","totalAcorns","setTotalAcorns","calculateAcorns","parsedAmount","parseFloat","parsedMultiplier","parsedRoundOffValue","isNaN","roundedTotal","roundNumber","parseInt","acorns","alert","number","ndigits","Math","ceil","handleInput","name","e","target","value","handleSubmit","preventDefault","SavingFormStyled","form"],"sources":["C:/Users/sanik/OneDrive/Desktop/Expense Tracker/expense-tracker_fullstack/frontend/src/Components/Acorn/AcornForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useGlobalContext } from '../../context/globalContext';\r\nimport Button from '../Button/Button';\r\nimport { plus } from '../../utils/Icons';\r\n\r\nfunction AcornForm() {\r\n    const { addSaving, error, setError } = useGlobalContext();\r\n    const [inputState, setInputState] = useState({\r\n        amount: '',\r\n        date: '',\r\n    });\r\n    const { amount, date } = inputState;\r\n    const [multiplier, setMultiplier] = useState('');\r\n    const [roundOffValue, setRoundOffValue] = useState('');\r\n    const [totalAcorns, setTotalAcorns] = useState(null);\r\n\r\n    const calculateAcorns = () => {\r\n        if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\r\n            const parsedAmount = parseFloat(amount);\r\n            const parsedMultiplier = parseFloat(multiplier);\r\n            const parsedRoundOffValue = parseFloat(roundOffValue);\r\n\r\n            if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\r\n                const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\r\n                const acorns = roundedTotal - parsedAmount;\r\n                setTotalAcorns(acorns * parsedMultiplier);\r\n            } else {\r\n                alert('Please enter valid numbers');\r\n            }\r\n        } else {\r\n            alert('Please fill in all fields');\r\n        }\r\n    };\r\n\r\n    const roundNumber = (number, ndigits) => {\r\n        if (!(number % 1)) {\r\n            return Math.ceil(number / 5) * 5;\r\n        } else {\r\n            return Math.ceil(number);\r\n        }\r\n    };\r\n\r\n    const handleInput = name => e => {\r\n        setInputState({ ...inputState, [name]: e.target.value });\r\n        setError('');\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        calculateAcorns();\r\n        e.preventDefault();\r\n        addSaving({ ...inputState, amount: totalAcorns }); // Assuming totalAcorns is the correct amount to add\r\n        setInputState({\r\n            amount: '',\r\n            date: '',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <SavingFormStyled onSubmit={handleSubmit}>\r\n            {error && <p className='error'>{error}</p>}\r\n            <div className=\"input-control\">\r\n                <input\r\n                    value={amount}\r\n                    type=\"text\"\r\n                    name={'amount'}\r\n                    placeholder={'Expense Amount'}\r\n                    onChange={handleInput('amount')}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"multiplier\">Multiplier:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"multiplier\"\r\n                    value={multiplier}\r\n                    onChange={(e) => setMultiplier(e.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"input-control\">\r\n                <DatePicker\r\n                    id='date'\r\n                    placeholderText='Enter A Date'\r\n                    selected={date}\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                    onChange={(date) => {\r\n                        setInputState({ ...inputState, date: date })\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"submit-btn\">\r\n                <Button\r\n                    name={'Add Saving'}\r\n                    icon={plus}\r\n                    bPad={'.8rem 1.6rem'}\r\n                    bRad={'30px'}\r\n                    bg={'var(--color-accent'}\r\n                    color={'#fff'}\r\n                />\r\n            </div>\r\n        </SavingFormStyled>\r\n    );\r\n}\r\n\r\nconst SavingFormStyled = styled.form`\r\n    // Your styling code here\r\n`;\r\n\r\nexport default AcornForm;\r\n// import React, { useState } from 'react'\r\n// import styled from 'styled-components'\r\n// import DatePicker from 'react-datepicker'\r\n// import \"react-datepicker/dist/react-datepicker.css\";\r\n// import { useGlobalContext } from '../../context/globalContext';\r\n// import Button from '../Button/Button';\r\n// import { plus } from '../../utils/Icons';\r\n\r\n\r\n// function AcornForm() {\r\n//     const {addSaving, error, setError} = useGlobalContext()\r\n//     const [inputState, setInputState] = useState({\r\n//         amount: '',\r\n//         date: '',\r\n//     })\r\n//     const { amount, date} = inputState;\r\n//     const [amount1, setAmount] = useState('');\r\n//   const [multiplier, setMultiplier] = useState('');\r\n//   const [roundOffValue, setRoundOffValue] = useState('');\r\n//   const [totalAcorns, setTotalAcorns] = useState(null);\r\n//   function isDecimal(num) {\r\n//     return (num % 1);\r\n//  }\r\n//   const roundNumber = (number, ndigits) => {\r\n//     debugger\r\n//     if (!isDecimal(number)) {\r\n//         return Math.ceil(number / 5) * 5;\r\n//     } else {\r\n//         return Math.ceil(number);\r\n//     }\r\n//     // if (ndigits === null) {\r\n//     //   return Math.round(number);\r\n//     // }\r\n//     // const factor = Math.pow(10, ndigits);\r\n//     // return Math.round(number * factor) / factor;/\r\n    \r\n//   };\r\n\r\n//   const calculateAcorns = () => {\r\n//     debugger\r\n//     if (amount1 !== '' && multiplier !== '' && roundOffValue !== '') {\r\n//       const parsedAmount = parseFloat(amount1);\r\n//       const parsedMultiplier = parseFloat(multiplier);\r\n//       const parsedRoundOffValue = parseFloat(roundOffValue);\r\n\r\n//       if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\r\n//         // const total = parsedAmount * parsedMultiplier;\r\n//         const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\r\n//         const acorns = roundedTotal - parsedAmount;\r\n//         setTotalAcorns(acorns*parsedMultiplier);\r\n//       } else {\r\n//         alert('Please enter valid numbers');\r\n//       }\r\n//     } else {\r\n//       alert('Please fill in all fields');\r\n//     }\r\n//   };\r\n    \r\n\r\n//     const handleInput = name => e => {\r\n//         setAmount(e.target.value)\r\n//         setInputState({...inputState, [name]: e.target.value})\r\n//         setError('')\r\n//     }\r\n\r\n//     const handleSubmit = e => {\r\n//         calculateAcorns()\r\n//         setAmount({totalAcorns})\r\n//         e.preventDefault()\r\n//         // setInputState({...inputState, [name]: e.target.value})\r\n//         addSaving(inputState)\r\n//         setInputState({\r\n//             amount: '',\r\n//             date: '',\r\n//         })\r\n//     }\r\n\r\n//     return (\r\n//         <SavingFormStyled onSubmit={handleSubmit}>\r\n//             {error && <p className='error'>{error}</p>}\r\n//             {/* <div className=\"input-control\">\r\n//                 <input \r\n//                     type=\"text\" \r\n//                     value={title}\r\n//                     name={'title'} \r\n//                     placeholder=\"Expense Title\"\r\n//                     onChange={handleInput('title')}\r\n//                 />\r\n//             </div> */}\r\n//             <div className=\"input-control\">\r\n//                 <input value={amount1}  \r\n//                     type=\"text\" \r\n//                     name={'amount'} \r\n//                     placeholder={'Expense Amount'}\r\n//                     onChange={handleInput('amount')} \r\n//                 />\r\n//             </div>\r\n//             <div>\r\n//         <label htmlFor=\"multiplier\">Multiplier:</label>\r\n//         <input\r\n//           type=\"number\"\r\n//           id=\"multiplier\"\r\n//           value={multiplier}\r\n//           onChange={(e) => setMultiplier(e.target.value)}\r\n//         />\r\n//       </div>\r\n//             <div className=\"input-control\">\r\n//                 <DatePicker \r\n//                     id='date'\r\n//                     placeholderText='Enter A Date'\r\n//                     selected={date}\r\n//                     dateFormat=\"dd/MM/yyyy\"\r\n//                     onChange={(date) => {\r\n//                         setInputState({...inputState, date: date})\r\n//                     }}\r\n//                 />\r\n//             </div>\r\n//             {/* <div className=\"selects input-control\">\r\n//                 <select required value={category} name=\"category\" id=\"category\" onChange={handleInput('category')}>\r\n//                     <option value=\"\" disabled >Select Option</option>\r\n//                     <option value=\"education\">Education</option>\r\n//                     <option value=\"groceries\">Groceries</option>\r\n//                     <option value=\"health\">Health</option>\r\n//                     <option value=\"subscriptions\">Subscriptions</option>\r\n//                     <option value=\"takeaways\">Takeaways</option>\r\n//                     <option value=\"clothing\">Clothing</option>  \r\n//                     <option value=\"travelling\">Travelling</option>  \r\n//                     <option value=\"other\">Other</option>  \r\n//                 </select>\r\n//             </div>\r\n//             <div className=\"input-control\">\r\n//                 <textarea name=\"description\" value={description} placeholder='Add A Reference' id=\"description\" cols=\"30\" rows=\"4\" onChange={handleInput('description')}></textarea>\r\n//                 </div>*/}\r\n//             <div className=\"submit-btn\">\r\n//                 <Button \r\n//                     name={'Add Saving'}\r\n//                     icon={plus}\r\n//                     bPad={'.8rem 1.6rem'}\r\n//                     bRad={'30px'}\r\n//                     bg={'var(--color-accent'}\r\n//                     color={'#fff'}\r\n//                 /> \r\n//             </div>\r\n//         </SavingFormStyled>\r\n//     )\r\n// }\r\n\r\n\r\n// const SavingFormStyled = styled.form`\r\n//     display: flex;\r\n//     flex-direction: column;\r\n//     gap: 2rem;\r\n//     input, textarea, select{\r\n//         font-family: inherit;\r\n//         font-size: inherit;\r\n//         outline: none;\r\n//         border: none;\r\n//         padding: .5rem 1rem;\r\n//         border-radius: 5px;\r\n//         border: 2px solid #fff;\r\n//         background: transparent;\r\n//         resize: none;\r\n//         box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n//         color: rgba(34, 34, 96, 0.9);\r\n//         &::placeholder{\r\n//             color: rgba(34, 34, 96, 0.4);\r\n//         }\r\n//     }\r\n//     .input-control{\r\n//         input{\r\n//             width: 100%;\r\n//         }\r\n//     }\r\n\r\n//     .selects{\r\n//         display: flex;\r\n//         justify-content: flex-end;\r\n//         select{\r\n//             color: rgba(34, 34, 96, 0.4);\r\n//             &:focus, &:active{\r\n//                 color: rgba(34, 34, 96, 1);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     .submit-btn{\r\n//         button{\r\n//             box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n//             &:hover{\r\n//                 background: var(--color-green) !important;\r\n//             }\r\n//         }\r\n//     }\r\n// `;\r\n// export default AcornForm"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}