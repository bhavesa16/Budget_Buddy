{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanik\\\\OneDrive\\\\Desktop\\\\Expense Tracker\\\\expense-tracker_fullstack\\\\frontend\\\\src\\\\Components\\\\Acorn\\\\Acorn.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AcornForm from './AcornForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AcornsCalculator = () => {\n  _s();\n  const [amount, setAmount] = useState('');\n  const [multiplier, setMultiplier] = useState('');\n  const [roundOffValue, setRoundOffValue] = useState('');\n  const [totalAcorns, setTotalAcorns] = useState(null);\n  const roundNumber = (number, ndigits) => {\n    if (ndigits === null) {\n      return Math.round(number);\n    }\n    const factor = Math.pow(10, ndigits);\n    return Math.round(number * factor) / factor;\n  };\n  const calculateAcorns = () => {\n    if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\n      const parsedAmount = parseFloat(amount);\n      const parsedMultiplier = parseFloat(multiplier);\n      const parsedRoundOffValue = parseFloat(roundOffValue);\n      if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\n        const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\n        const acorns = roundedTotal - parsedAmount;\n        setTotalAcorns(acorns * parsedMultiplier);\n      } else {\n        alert('Please enter valid numbers');\n      }\n    } else {\n      alert('Please fill in all fields');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Acorns Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AcornForm, {\n      setTotalAcorns: setTotalAcorns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), totalAcorns !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Acorns: \", totalAcorns]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayWithAcorn,\n        children: \"Pay with Acorn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePayWithoutAcorn,\n        children: \"Pay without Acorn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AcornsCalculator, \"A4/LP8eJ/NjwfxIWljrDNHMhpdA=\");\n_c = AcornsCalculator;\nexport default AcornsCalculator;\n\n// import React, { useState } from 'react';\n// import AcornForm from './AcornForm';\n\n// const AcornsCalculator = () => {\n//     const [amount, setAmount] = useState('');\n//     const [multiplier, setMultiplier] = useState('');\n//     const [roundOffValue, setRoundOffValue] = useState('');\n//     const [totalAcorns, setTotalAcorns] = useState(null);\n//     function isDecimal(num) {\n//         return (num % 1);\n//      }\n//       const roundNumber = (number, ndigits) => {\n//         debugger\n//         if (!isDecimal(number)) {\n//             return Math.ceil(number / 5) * 5;\n//         } else {\n//             return Math.ceil(number);\n//         }\n//         // if (ndigits === null) {\n//         //   return Math.round(number);\n//         // }\n//         // const factor = Math.pow(10, ndigits);\n//         // return Math.round(number * factor) / factor;/\n\n//       };\n\n//       const calculateAcorns = () => {\n//         debugger\n//         if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\n//           const parsedAmount = parseFloat(amount);\n//           const parsedMultiplier = parseFloat(multiplier);\n//           const parsedRoundOffValue = parseFloat(roundOffValue);\n\n//           if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\n//             // const total = parsedAmount * parsedMultiplier;\n//             const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\n//             const acorns = roundedTotal - parsedAmount;\n//             setTotalAcorns(acorns*parsedMultiplier);\n//           } else {\n//             alert('Please enter valid numbers');\n//           }\n//         } else {\n//           alert('Please fill in all fields');\n//         }\n//       };\n\n//   const handlePayWithAcorn = () => {\n//     // Logic for payment with acorns\n//     alert(\"Payment with Acorn successful!\");\n//   };\n\n//   const handlePayWithoutAcorn = () => {\n//     // Logic for payment without acorns\n//     alert(\"Payment without Acorn successful!\");\n//   };\n\n//   return (\n//     <div>\n//       <h2>Acorns Calculator</h2>\n//       {/* Render AcornForm component */}\n//       <AcornForm setResult={setResult} />\n//       {result !== null && (\n//         <div>\n//           <h3>Total Acorns: {result}</h3>\n//         </div>\n//       )}\n\n//       <div className=\"payment-buttons\">\n//         <button onClick={handlePayWithAcorn}>Pay with Acorn</button>\n//         <button onClick={handlePayWithoutAcorn}>Pay without Acorn</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AcornsCalculator;\nvar _c;\n$RefreshReg$(_c, \"AcornsCalculator\");","map":{"version":3,"names":["React","useState","AcornForm","AcornsCalculator","amount","setAmount","multiplier","setMultiplier","roundOffValue","setRoundOffValue","totalAcorns","setTotalAcorns","roundNumber","number","ndigits","Math","round","factor","pow","calculateAcorns","parsedAmount","parseFloat","parsedMultiplier","parsedRoundOffValue","isNaN","roundedTotal","parseInt","acorns","alert","handlePayWithAcorn","handlePayWithoutAcorn"],"sources":["C:/Users/sanik/OneDrive/Desktop/Expense Tracker/expense-tracker_fullstack/frontend/src/Components/Acorn/Acorn.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport AcornForm from './AcornForm';\r\n\r\nconst AcornsCalculator = () => {\r\n  const [amount, setAmount] = useState('');\r\n  const [multiplier, setMultiplier] = useState('');\r\n  const [roundOffValue, setRoundOffValue] = useState('');\r\n  const [totalAcorns, setTotalAcorns] = useState(null);\r\n\r\n  const roundNumber = (number, ndigits) => {\r\n    if (ndigits === null) {\r\n      return Math.round(number);\r\n    }\r\n    const factor = Math.pow(10, ndigits);\r\n    return Math.round(number * factor) / factor;\r\n  };\r\n\r\n  const calculateAcorns = () => {\r\n    if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\r\n      const parsedAmount = parseFloat(amount);\r\n      const parsedMultiplier = parseFloat(multiplier);\r\n      const parsedRoundOffValue = parseFloat(roundOffValue);\r\n\r\n      if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\r\n        const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\r\n        const acorns = roundedTotal - parsedAmount;\r\n        setTotalAcorns(acorns * parsedMultiplier);\r\n      } else {\r\n        alert('Please enter valid numbers');\r\n      }\r\n    } else {\r\n      alert('Please fill in all fields');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Acorns Calculator</h2>\r\n      <AcornForm setTotalAcorns={setTotalAcorns} />\r\n      {totalAcorns !== null && (\r\n        <div>\r\n          <h3>Total Acorns: {totalAcorns}</h3>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"payment-buttons\">\r\n        <button onClick={handlePayWithAcorn}>Pay with Acorn</button>\r\n        <button onClick={handlePayWithoutAcorn}>Pay without Acorn</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AcornsCalculator;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import AcornForm from './AcornForm';\r\n\r\n// const AcornsCalculator = () => {\r\n//     const [amount, setAmount] = useState('');\r\n//     const [multiplier, setMultiplier] = useState('');\r\n//     const [roundOffValue, setRoundOffValue] = useState('');\r\n//     const [totalAcorns, setTotalAcorns] = useState(null);\r\n//     function isDecimal(num) {\r\n//         return (num % 1);\r\n//      }\r\n//       const roundNumber = (number, ndigits) => {\r\n//         debugger\r\n//         if (!isDecimal(number)) {\r\n//             return Math.ceil(number / 5) * 5;\r\n//         } else {\r\n//             return Math.ceil(number);\r\n//         }\r\n//         // if (ndigits === null) {\r\n//         //   return Math.round(number);\r\n//         // }\r\n//         // const factor = Math.pow(10, ndigits);\r\n//         // return Math.round(number * factor) / factor;/\r\n        \r\n//       };\r\n    \r\n//       const calculateAcorns = () => {\r\n//         debugger\r\n//         if (amount !== '' && multiplier !== '' && roundOffValue !== '') {\r\n//           const parsedAmount = parseFloat(amount);\r\n//           const parsedMultiplier = parseFloat(multiplier);\r\n//           const parsedRoundOffValue = parseFloat(roundOffValue);\r\n    \r\n//           if (!isNaN(parsedAmount) && !isNaN(parsedMultiplier) && !isNaN(parsedRoundOffValue)) {\r\n//             // const total = parsedAmount * parsedMultiplier;\r\n//             const roundedTotal = roundNumber(parsedAmount, parseInt(parsedRoundOffValue));\r\n//             const acorns = roundedTotal - parsedAmount;\r\n//             setTotalAcorns(acorns*parsedMultiplier);\r\n//           } else {\r\n//             alert('Please enter valid numbers');\r\n//           }\r\n//         } else {\r\n//           alert('Please fill in all fields');\r\n//         }\r\n//       };\r\n    \r\n\r\n//   const handlePayWithAcorn = () => {\r\n//     // Logic for payment with acorns\r\n//     alert(\"Payment with Acorn successful!\");\r\n//   };\r\n\r\n//   const handlePayWithoutAcorn = () => {\r\n//     // Logic for payment without acorns\r\n//     alert(\"Payment without Acorn successful!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Acorns Calculator</h2>\r\n//       {/* Render AcornForm component */}\r\n//       <AcornForm setResult={setResult} />\r\n//       {result !== null && (\r\n//         <div>\r\n//           <h3>Total Acorns: {result}</h3>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"payment-buttons\">\r\n//         <button onClick={handlePayWithAcorn}>Pay with Acorn</button>\r\n//         <button onClick={handlePayWithoutAcorn}>Pay without Acorn</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AcornsCalculator;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC;AAEpC,MAAMC,gBAAgB,GAAG,MAAM;EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMW,WAAW,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAK;IACvC,IAAIA,OAAO,KAAK,IAAI,EAAE;MACpB,OAAOC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;IAC3B;IACA,MAAMI,MAAM,GAAGF,IAAI,CAACG,GAAG,CAAC,EAAE,EAAEJ,OAAO,CAAC;IACpC,OAAOC,IAAI,CAACC,KAAK,CAACH,MAAM,GAAGI,MAAM,CAAC,GAAGA,MAAM;EAC7C,CAAC;EAED,MAAME,eAAe,GAAG,MAAM;IAC5B,IAAIf,MAAM,KAAK,EAAE,IAAIE,UAAU,KAAK,EAAE,IAAIE,aAAa,KAAK,EAAE,EAAE;MAC9D,MAAMY,YAAY,GAAGC,UAAU,CAACjB,MAAM,CAAC;MACvC,MAAMkB,gBAAgB,GAAGD,UAAU,CAACf,UAAU,CAAC;MAC/C,MAAMiB,mBAAmB,GAAGF,UAAU,CAACb,aAAa,CAAC;MAErD,IAAI,CAACgB,KAAK,CAACJ,YAAY,CAAC,IAAI,CAACI,KAAK,CAACF,gBAAgB,CAAC,IAAI,CAACE,KAAK,CAACD,mBAAmB,CAAC,EAAE;QACnF,MAAME,YAAY,GAAGb,WAAW,CAACQ,YAAY,EAAEM,QAAQ,CAACH,mBAAmB,CAAC,CAAC;QAC7E,MAAMI,MAAM,GAAGF,YAAY,GAAGL,YAAY;QAC1CT,cAAc,CAACgB,MAAM,GAAGL,gBAAgB,CAAC;MAC3C,CAAC,MAAM;QACLM,KAAK,CAAC,4BAA4B,CAAC;MACrC;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAI;IAAiB;MAAA;MAAA;MAAA;IAAA,QAAK,eAC1B,QAAC,SAAS;MAAC,cAAc,EAAEjB;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG,EAC5CD,WAAW,KAAK,IAAI,iBACnB;MAAA,uBACE;QAAA,WAAI,gBAAc,EAACA,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QAEvC,eAED;MAAK,SAAS,EAAC,iBAAiB;MAAA,wBAC9B;QAAQ,OAAO,EAAEmB,kBAAmB;QAAA,UAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QAAS,eAC5D;QAAQ,OAAO,EAAEC,qBAAsB;QAAA,UAAC;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9D;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAhDI3B,gBAAgB;AAAA,KAAhBA,gBAAgB;AAkDtB,eAAeA,gBAAgB;;AAG/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}